import Link from "next/link"
import { getAllProducts, getSalesRepById, getWeeklyReportsBySalesRepId, getFilesByEntity } from "@/lib/db"
import { formatCurrency } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { notFound } from "next/navigation"
import { DeleteSalesRepButton } from "@/components/delete-sales-rep-button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { FileUploader } from "@/components/file-uploader"
import { FileList } from "@/components/file-list"
import { sql } from "@/lib/db"
import Image from "next/image"
import { SalesRepProductList } from "@/components/sales-rep-product-list"

async function getLeadGenerationBySalesRep(salesRepId: number) {
  try {
    // Check if the sales_lead_generation table exists
    const tableExists = await sql`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'sales_lead_generation'
      ) as exists
    `

    if (!tableExists[0]?.exists) {
      return { asGenerator: [], asRecipient: [] }
    }

    // Get leads generated by this sales rep
    const asGenerator = await sql`
      SELECT 
        slg.*,
        sr.name as recipient_name,
        wsr.week_starting
      FROM sales_lead_generation slg
      JOIN sales_representatives sr ON slg.recipient_id = sr.id
      JOIN weekly_sales_reports wsr ON slg.weekly_report_id = wsr.id
      WHERE slg.generator_id = ${salesRepId}
      ORDER BY wsr.week_starting DESC
    `

    // Get leads received by this sales rep
    const asRecipient = await sql`
      SELECT 
        slg.*,
        sr.name as generator_name,
        wsr.week_starting
      FROM sales_lead_generation slg
      JOIN sales_representatives sr ON slg.generator_id = sr.id
      JOIN weekly_sales_reports wsr ON slg.weekly_report_id = wsr.id
      WHERE slg.recipient_id = ${salesRepId}
      ORDER BY wsr.week_starting DESC
    `

    return { asGenerator, asRecipient }
  } catch (error) {
    console.error("Error fetching lead generation data:", error)
    return { asGenerator: [], asRecipient: [] }
  }
}

export default async function SalesRepDetailPage({ params }: { params: { id: string } }) {
  try {
    const salesRepId = Number.parseInt(params.id)

    if (isNaN(salesRepId)) {
      notFound()
    }

    // Fetch the sales rep first to check if it exists
    const salesRep = await getSalesRepById(salesRepId)

    if (!salesRep) {
      notFound()
    }

    // Then fetch the rest of the data
    const [weeklyReports, files, leadGeneration, products] = await Promise.all([
      getWeeklyReportsBySalesRepId(salesRepId).catch((err) => {
        console.error("Error fetching weekly reports:", err)
        return []
      }),
      getFilesByEntity("sales_rep", salesRepId).catch((err) => {
        console.error("Error fetching files:", err)
        return []
      }),
      getLeadGenerationBySalesRep(salesRepId).catch((err) => {
        console.error("Error fetching lead generation:", err)
        return { asGenerator: [], asRecipient: [] }
      }),
      getAllProducts().catch((err) => {
        console.error("Error fetching products:", err)
        return []
      }),
    ])

    // Calculate total sales with fallback to 0 for undefined values
    const totalSales = weeklyReports.reduce((sum, report) => sum + (report.cash_collected || 0), 0)

    // Calculate total commission from lead generation with fallback to 0 for undefined values
    const totalCommissionEarned = leadGeneration.asGenerator.reduce(
      (sum, lead) => sum + (lead.commission_amount || 0),
      0,
    )

    // Calculate total leads generated and converted with fallback to 0 for undefined values
    const totalLeadsGenerated = leadGeneration.asGenerator.reduce((sum, lead) => sum + (lead.leads_generated || 0), 0)
    const totalLeadsConverted = leadGeneration.asGenerator.reduce((sum, lead) => sum + (lead.leads_converted || 0), 0)

    // Calculate total leads received and converted for this rep with fallback to 0 for undefined values
    const totalLeadsReceived = leadGeneration.asRecipient.reduce((sum, lead) => sum + (lead.leads_generated || 0), 0)
    const totalLeadsReceivedConverted = leadGeneration.asRecipient.reduce(
      (sum, lead) => sum + (lead.leads_converted || 0),
      0,
    )

    // Calculate performance against target with fallback to 0 for undefined values
    const targetAmount = salesRep.target_amount || 0
    const performancePercentage = targetAmount > 0 ? (totalSales / targetAmount) * 100 : 0

    return (
      <div className="container mx-auto py-8">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold">Sales Representative</h1>
          <Link href="/sales-reps">
            <Button variant="outline">Back to Sales Reps</Button>
          </Link>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-sm border mb-6">
          <div className="flex flex-col md:flex-row justify-between mb-6">
            <div className="flex items-start gap-4">
              {salesRep.image_url && (
                <div className="relative w-20 h-20 rounded-full overflow-hidden border">
                  <Image
                    src={salesRep.image_url || "/placeholder.svg"}
                    alt={salesRep.name}
                    fill
                    className="object-cover"
                    unoptimized
                  />
                </div>
              )}
              <div>
                <h2 className="text-2xl font-semibold">{salesRep.name}</h2>
                <p className="text-muted-foreground">{salesRep.email}</p>
                <p className="text-muted-foreground">{salesRep.phone || "No phone number"}</p>
              </div>
            </div>
            <div className="flex gap-2 mt-4 md:mt-0">
              <Link href={`/sales-reps/${salesRep.id}/edit`}>
                <Button>Edit Sales Rep</Button>
              </Link>
              <DeleteSalesRepButton salesRepId={salesRep.id} />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-primary/5 p-4 rounded-lg">
              <h3 className="text-sm font-medium text-muted-foreground mb-1">Target</h3>
              <p className="text-2xl font-bold">{formatCurrency(salesRep.target_amount || 0)}</p>
              <div className="mt-2">
                <div className="h-2 bg-muted rounded-full overflow-hidden">
                  <div
                    className={`h-full ${performancePercentage >= 100 ? "bg-green-500" : "bg-blue-500"}`}
                    style={{ width: `${Math.min(performancePercentage, 100)}%` }}
                  ></div>
                </div>
                <p className="text-sm mt-1">{performancePercentage.toFixed(1)}% of target achieved</p>
              </div>
            </div>

            <div className="bg-primary/5 p-4 rounded-lg">
              <h3 className="text-sm font-medium text-muted-foreground mb-1">Sales Performance</h3>
              <div className="space-y-2">
                <div>
                  <p className="text-xs text-muted-foreground">Total Sales</p>
                  <p className="text-lg font-semibold">{formatCurrency(totalSales)}</p>
                </div>
                <div>
                  <p className="text-xs text-muted-foreground">Commission Earned</p>
                  <p className="text-lg font-semibold">{formatCurrency(totalCommissionEarned)}</p>
                </div>
                <div>
                  <p className="text-xs text-muted-foreground">Total Revenue</p>
                  <p className="text-lg font-semibold">{formatCurrency(totalSales + totalCommissionEarned)}</p>
                </div>
              </div>
            </div>

            <div className="bg-primary/5 p-4 rounded-lg">
              <h3 className="text-sm font-medium text-muted-foreground mb-1">Lead Generation</h3>
              <div className="space-y-2">
                <div>
                  <p className="text-xs text-muted-foreground">Leads Generated</p>
                  <p className="text-lg font-semibold">{totalLeadsGenerated}</p>
                </div>
                <div>
                  <p className="text-xs text-muted-foreground">Leads Converted</p>
                  <p className="text-lg font-semibold">
                    {totalLeadsConverted} (
                    {totalLeadsGenerated > 0 ? ((totalLeadsConverted / totalLeadsGenerated) * 100).toFixed(1) : 0}
                    %)
                  </p>
                </div>
                <div>
                  <p className="text-xs text-muted-foreground">Leads Received</p>
                  <p className="text-lg font-semibold">
                    {totalLeadsReceived} ({totalLeadsReceivedConverted} converted)
                  </p>
                </div>
              </div>
            </div>
          </div>

          <Tabs defaultValue="weekly-reports" className="w-full">
            <TabsList className="grid w-full grid-cols-4 mb-6">
              <TabsTrigger value="weekly-reports">Weekly Reports</TabsTrigger>
              <TabsTrigger value="product-sales">Product Sales</TabsTrigger>
              <TabsTrigger value="leads-generated">Leads Generated</TabsTrigger>
              <TabsTrigger value="leads-received">Leads Received</TabsTrigger>
            </TabsList>

            <TabsContent value="weekly-reports">
              <div className="border rounded-lg overflow-hidden">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Week Starting</TableHead>
                      <TableHead>Cash Collected</TableHead>
                      <TableHead>Invoices Raised</TableHead>
                      <TableHead>New Clients</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {weeklyReports.length > 0 ? (
                      weeklyReports.map((report) => (
                        <TableRow key={report.id}>
                          <TableCell>{new Date(report.week_starting).toLocaleDateString()}</TableCell>
                          <TableCell>{formatCurrency(report.cash_collected || 0)}</TableCell>
                          <TableCell>{formatCurrency(report.invoices_raised || 0)}</TableCell>
                          <TableCell>{report.new_clients_added || 0}</TableCell>
                          <TableCell>
                            <Link href={`/weekly-reports/${report.id}`}>
                              <Button variant="outline" size="sm">
                                View
                              </Button>
                            </Link>
                          </TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={5} className="text-center py-4">
                          No weekly reports found
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </div>
            </TabsContent>

            <TabsContent value="product-sales">
              <div className="space-y-6">
                <SalesRepProductList salesRepId={salesRepId} />
              </div>
            </TabsContent>

            <TabsContent value="leads-generated">
              {leadGeneration.asGenerator.length > 0 ? (
                <div className="border rounded-lg overflow-hidden">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Week</TableHead>
                        <TableHead>Recipient</TableHead>
                        <TableHead>Leads Generated</TableHead>
                        <TableHead>Leads Converted</TableHead>
                        <TableHead>Value</TableHead>
                        <TableHead>Commission</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {leadGeneration.asGenerator.map((lead) => (
                        <TableRow key={lead.id}>
                          <TableCell>{new Date(lead.week_starting).toLocaleDateString()}</TableCell>
                          <TableCell>{lead.recipient_name || "Unknown"}</TableCell>
                          <TableCell>{lead.leads_generated || 0}</TableCell>
                          <TableCell>{lead.leads_converted || 0}</TableCell>
                          <TableCell>{formatCurrency(lead.value_of_converted_leads || 0)}</TableCell>
                          <TableCell>{formatCurrency(lead.commission_amount || 0)}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              ) : (
                <div className="text-center py-12 bg-muted rounded-lg">
                  <h2 className="text-xl font-medium mb-2">No leads generated</h2>
                  <p className="text-muted-foreground">This sales representative hasn't generated any leads yet</p>
                </div>
              )}
            </TabsContent>

            <TabsContent value="leads-received">
              {leadGeneration.asRecipient.length > 0 ? (
                <div className="border rounded-lg overflow-hidden">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Week</TableHead>
                        <TableHead>Generator</TableHead>
                        <TableHead>Leads Received</TableHead>
                        <TableHead>Leads Converted</TableHead>
                        <TableHead>Value</TableHead>
                        <TableHead>Commission Paid</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {leadGeneration.asRecipient.map((lead) => (
                        <TableRow key={lead.id}>
                          <TableCell>{new Date(lead.week_starting).toLocaleDateString()}</TableCell>
                          <TableCell>{lead.generator_name || "Unknown"}</TableCell>
                          <TableCell>{lead.leads_generated || 0}</TableCell>
                          <TableCell>{lead.leads_converted || 0}</TableCell>
                          <TableCell>{formatCurrency(lead.value_of_converted_leads || 0)}</TableCell>
                          <TableCell>{formatCurrency(lead.commission_amount || 0)}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              ) : (
                <div className="text-center py-12 bg-muted rounded-lg">
                  <h2 className="text-xl font-medium mb-2">No leads received</h2>
                  <p className="text-muted-foreground">This sales representative hasn't received any leads yet</p>
                </div>
              )}
            </TabsContent>
          </Tabs>
        </div>

        <div className="mt-8">
          <h2 className="text-2xl font-bold mb-4">Sales Rep Documents</h2>
          <div className="bg-white p-6 rounded-lg shadow-sm border">
            <div className="mb-6">
              <FileUploader entityType="sales_rep" entityId={salesRepId} uploadedBy={salesRepId} />
            </div>

            <div className="mt-8">
              <h3 className="text-lg font-semibold mb-4">Uploaded Files</h3>
              <FileList files={files} entityType="sales_rep" entityId={salesRepId} />
            </div>
          </div>
        </div>
      </div>
    )
  } catch (error) {
    console.error("Error in SalesRepDetailPage:", error)
    return (
      <div className="container mx-auto py-8">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold">Sales Representative</h1>
          <Link href="/sales-reps">
            <Button variant="outline">Back to Sales Reps</Button>
          </Link>
        </div>
        <div className="bg-white p-6 rounded-lg shadow-sm border text-center">
          <h2 className="text-xl font-medium text-red-600 mb-4">Error Loading Sales Representative</h2>
          <p className="mb-4">
            There was an error loading this sales representative's details. This might be due to database issues or
            missing data.
          </p>
          <pre className="bg-gray-100 p-4 rounded text-left text-xs overflow-auto max-h-40 mb-4">
            {error instanceof Error ? error.message : String(error)}
          </pre>
          <Link href="/sales-reps">
            <Button>Return to Sales Representatives</Button>
          </Link>
        </div>
      </div>
    )
  }
}
